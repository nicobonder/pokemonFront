{"ast":null,"code":"import _slicedToArray from\"C:/Users/Nicolas/Documents/Nico/Henry/PI/deployPoke/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import s from\"./Pokemons.module.css\";import{useDispatch,useSelector}from\"react-redux\";import logo from\"../Navbar/pokeLogo.png\";import*as actions from\"../../redux/actions\";//importo para poder mapear todas las cards\nimport PokeCard from\"../PokeCard/PokeCard\";//Importo los demas componentes que necesito\nimport Paging from\"../Paging/Paging\";import Filters from\"../Filters/Filters\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Pokemons(){var dispatch=useDispatch();var pokemons=useSelector(function(state){return state.pokemons;});//Paginado\nvar _useState=useState(1),_useState2=_slicedToArray(_useState,2),currentPage=_useState2[0],setCurrentPage=_useState2[1];//Pokemons va a empezar en la primera pagina\nvar _useState3=useState(12),_useState4=_slicedToArray(_useState3,1),pokemonsPerPage/*setPokemonsPerPage*/=_useState4[0];//Traigo 12 poke por pagina\n//const [/*items*/, setItems] = useState([...pokemons].splice(0, pokemonsPerPage));\nvar indexOfLastPokemon=currentPage*pokemonsPerPage;//empieza en 12. Es el indice del ultimo poke que tengo en la pagina\nvar indexOfFirstPokemon=indexOfLastPokemon-pokemonsPerPage;//empieza en 0. 12-12 . Es el indice del primer pokemon\nvar currentPokemons=pokemons.slice(indexOfFirstPokemon,indexOfLastPokemon);//corto los poke q quiero de la array de pokemons\nfunction paging(pageNumber){setCurrentPage(pageNumber);//setea la pag actual con el nro de pagina que le paso desde el Paging\n}function nextHandler(){var totalPokemons=pokemons.length;var nextPage=currentPage;var firstIndex=nextPage*pokemonsPerPage;if(firstIndex>=totalPokemons)return;//si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\n//setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\n//console.log('nextPage', nextPage)\nsetCurrentPage(currentPage+1);}function prevHandler(){var prevPage=currentPage-1;if(prevPage<0)return;//const firstIndex = prevPage * pokemonsPerPage;\n//setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\nsetCurrentPage(prevPage);}React.useEffect(function(){dispatch(actions.getPokemons());dispatch(actions.getTypes());},[dispatch]);return/*#__PURE__*/_jsxs(\"div\",{className:s.pokemonsSection,children:[/*#__PURE__*/_jsxs(\"div\",{className:s.filtered,children:[/*#__PURE__*/_jsx(Filters,{setCurrentPage:setCurrentPage}),\" \"]}),/*#__PURE__*/_jsx(\"div\",{className:s.pokePaged,children:currentPokemons.length>0?/*#__PURE__*/_jsxs(\"div\",{className:s.newdiv,children:[/*#__PURE__*/_jsx(\"div\",{className:s.allPokemons,children:currentPokemons===null||currentPokemons===void 0?void 0:currentPokemons.map(function(poke){return/*#__PURE__*/_jsx(PokeCard,{id:poke.id,name:poke.name,image:poke.img,types:poke.types},poke.id);})}),currentPokemons.length>0&&/*#__PURE__*/_jsx(Paging,{pokemonsPerPage:pokemonsPerPage,pokemons:pokemons.length,paging:paging,nextHandler:nextHandler,prevHandler:prevHandler,currentPage:currentPage})]}):/*#__PURE__*/_jsxs(\"div\",{className:s.loading,children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"Loading Pokemons\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"LOADING\"})]})})]});}","map":{"version":3,"names":["React","useState","s","useDispatch","useSelector","logo","actions","PokeCard","Paging","Filters","Pokemons","dispatch","pokemons","state","currentPage","setCurrentPage","pokemonsPerPage","indexOfLastPokemon","indexOfFirstPokemon","currentPokemons","slice","paging","pageNumber","nextHandler","totalPokemons","length","nextPage","firstIndex","prevHandler","prevPage","useEffect","getPokemons","getTypes","pokemonsSection","filtered","pokePaged","newdiv","allPokemons","map","poke","id","name","img","types","loading"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/deployPoke/client/src/components/Pokemons/Pokemons.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport s from \"./Pokemons.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logo from \"../Navbar/pokeLogo.png\";\r\nimport * as actions from \"../../redux/actions\";\r\n\r\n//importo para poder mapear todas las cards\r\nimport PokeCard from \"../PokeCard/PokeCard\";\r\n//Importo los demas componentes que necesito\r\nimport Paging from \"../Paging/Paging\";\r\nimport Filters from \"../Filters/Filters\";\r\n\r\nexport default function Pokemons() {\r\n  const dispatch = useDispatch();\r\n  const pokemons = useSelector((state) => state.pokemons);\r\n\r\n  //Paginado\r\n  const [currentPage, setCurrentPage] = useState(1); //Pokemons va a empezar en la primera pagina\r\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Traigo 12 poke por pagina\r\n  //const [/*items*/, setItems] = useState([...pokemons].splice(0, pokemonsPerPage));\r\n  const indexOfLastPokemon = currentPage * pokemonsPerPage; //empieza en 12. Es el indice del ultimo poke que tengo en la pagina\r\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage; //empieza en 0. 12-12 . Es el indice del primer pokemon\r\n  const currentPokemons = pokemons.slice(\r\n    indexOfFirstPokemon,\r\n    indexOfLastPokemon\r\n  ); //corto los poke q quiero de la array de pokemons\r\n\r\n  function paging(pageNumber) {\r\n    setCurrentPage(pageNumber); //setea la pag actual con el nro de pagina que le paso desde el Paging\r\n  }\r\n\r\n  function nextHandler() {\r\n    const totalPokemons = pokemons.length;\r\n    const nextPage = currentPage;\r\n    const firstIndex = nextPage * pokemonsPerPage;\r\n    if (firstIndex >= totalPokemons) return; //si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\r\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    //console.log('nextPage', nextPage)\r\n    setCurrentPage(currentPage + 1);\r\n  }\r\n\r\n  function prevHandler() {\r\n    const prevPage = currentPage - 1;\r\n    if (prevPage < 0) return;\r\n    //const firstIndex = prevPage * pokemonsPerPage;\r\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    setCurrentPage(prevPage);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getPokemons());\r\n    dispatch(actions.getTypes());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={s.pokemonsSection}>\r\n      <div className={s.filtered}>\r\n        <Filters setCurrentPage={setCurrentPage} /> {/*paso currentPage al componente Filters*/}\r\n      </div>\r\n      <div className={s.pokePaged}>\r\n          {currentPokemons.length > 0 ? (\r\n            <div className={s.newdiv}>\r\n              <div className={s.allPokemons}>\r\n              {currentPokemons?.map((poke) => {\r\n                return (\r\n                  <PokeCard\r\n                    key={poke.id}\r\n                    id={poke.id}\r\n                    name={poke.name}\r\n                    image={poke.img}\r\n                    types={poke.types}\r\n                  />\r\n                );\r\n              })}\r\n              </div>\r\n              {currentPokemons.length > 0 && (\r\n                <Paging\r\n                  pokemonsPerPage={pokemonsPerPage}\r\n                  pokemons={pokemons.length}\r\n                  paging={paging}\r\n                  nextHandler={nextHandler}\r\n                  prevHandler={prevHandler}\r\n                  currentPage={currentPage}\r\n                />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={s.loading}>\r\n              <img src={logo} alt=\"Loading Pokemons\" />\r\n              <h3>LOADING</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}