{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicolas\\\\Documents\\\\Nico\\\\Henry\\\\PI\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Pokemons\\\\Pokemons.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport s from \"./Pokemons.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../Navbar/pokeLogo.png\";\nimport * as actions from \"../../redux/actions\";\n\n//importo para poder mapear todas las cards\nimport PokeCard from \"../PokeCard/PokeCard\";\n//Importo los demas componentes que necesito\nimport Paging from \"../Paging/Paging\";\nimport Filters from \"../Filters/Filters\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pokemons() {\n  _s();\n  const dispatch = useDispatch();\n  const pokemons = useSelector(state => state.pokemons);\n\n  //Paginado\n  const [currentPage, setCurrentPage] = useState(1); //Pokemons va a empezar en la primera pagina\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Traigo 12 poke por pagina\n  //const [/*items*/, setItems] = useState([...pokemons].splice(0, pokemonsPerPage));\n  const indexOfLastPokemon = currentPage * pokemonsPerPage; //empieza en 12. Es el indice del ultimo poke que tengo en la pagina\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage; //empieza en 0. 12-12 . Es el indice del primer pokemon\n  const currentPokemons = pokemons.slice(indexOfFirstPokemon, indexOfLastPokemon); //corto los poke q quiero de la array de pokemons\n\n  function paging(pageNumber) {\n    setCurrentPage(pageNumber); //setea la pag actual con el nro de pagina que le paso desde el Paging\n  }\n\n  function nextHandler() {\n    const totalPokemons = pokemons.length;\n    const nextPage = currentPage;\n    const firstIndex = nextPage * pokemonsPerPage;\n    if (firstIndex >= totalPokemons) return; //si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\n    //console.log('nextPage', nextPage)\n    console.log(\"currentPage\", currentPage);\n    setCurrentPage(currentPage + 1);\n  }\n  function prevHandler() {\n    const prevPage = currentPage - 1;\n    if (prevPage < 0) return;\n    const firstIndex = prevPage * pokemonsPerPage;\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\n    console.log(\"prevPage\", prevPage);\n    console.log(\"currentPage\", currentPage);\n    setCurrentPage(prevPage);\n  }\n  React.useEffect(() => {\n    dispatch(actions.getPokemons());\n    dispatch(actions.getTypes());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.pokemonsSection,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.filtered,\n      children: [/*#__PURE__*/_jsxDEV(Filters, {\n        setCurrentPage: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.pokePaged,\n      children: currentPokemons.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.newdiv,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.allPokemons,\n          children: currentPokemons === null || currentPokemons === void 0 ? void 0 : currentPokemons.map(poke => {\n            return /*#__PURE__*/_jsxDEV(PokeCard, {\n              id: poke.id,\n              name: poke.name,\n              image: poke.img,\n              types: poke.types\n            }, poke.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), currentPokemons.length > 0 && /*#__PURE__*/_jsxDEV(Paging, {\n          pokemonsPerPage: pokemonsPerPage,\n          pokemons: pokemons.length,\n          paging: paging,\n          nextHandler: nextHandler,\n          prevHandler: prevHandler,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.loading,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Loading Pokemons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"LOADING\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Pokemons, \"N5uCI82eO1UBo74x/qOC9vh6/lk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Pokemons;\nvar _c;\n$RefreshReg$(_c, \"Pokemons\");","map":{"version":3,"names":["React","useState","s","useDispatch","useSelector","logo","actions","PokeCard","Paging","Filters","Pokemons","dispatch","pokemons","state","currentPage","setCurrentPage","pokemonsPerPage","indexOfLastPokemon","indexOfFirstPokemon","currentPokemons","slice","paging","pageNumber","nextHandler","totalPokemons","length","nextPage","firstIndex","console","log","prevHandler","prevPage","useEffect","getPokemons","getTypes","pokemonsSection","filtered","pokePaged","newdiv","allPokemons","map","poke","id","name","img","types","loading"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/PI-Pokemon-main/client/src/components/Pokemons/Pokemons.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport s from \"./Pokemons.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logo from \"../Navbar/pokeLogo.png\";\r\nimport * as actions from \"../../redux/actions\";\r\n\r\n//importo para poder mapear todas las cards\r\nimport PokeCard from \"../PokeCard/PokeCard\";\r\n//Importo los demas componentes que necesito\r\nimport Paging from \"../Paging/Paging\";\r\nimport Filters from \"../Filters/Filters\";\r\n\r\nexport default function Pokemons() {\r\n  const dispatch = useDispatch();\r\n  const pokemons = useSelector((state) => state.pokemons);\r\n\r\n  //Paginado\r\n  const [currentPage, setCurrentPage] = useState(1); //Pokemons va a empezar en la primera pagina\r\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Traigo 12 poke por pagina\r\n  //const [/*items*/, setItems] = useState([...pokemons].splice(0, pokemonsPerPage));\r\n  const indexOfLastPokemon = currentPage * pokemonsPerPage; //empieza en 12. Es el indice del ultimo poke que tengo en la pagina\r\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage; //empieza en 0. 12-12 . Es el indice del primer pokemon\r\n  const currentPokemons = pokemons.slice(\r\n    indexOfFirstPokemon,\r\n    indexOfLastPokemon\r\n  ); //corto los poke q quiero de la array de pokemons\r\n\r\n  function paging(pageNumber) {\r\n    setCurrentPage(pageNumber); //setea la pag actual con el nro de pagina que le paso desde el Paging\r\n  }\r\n\r\n  function nextHandler() {\r\n    const totalPokemons = pokemons.length;\r\n    const nextPage = currentPage;\r\n    const firstIndex = nextPage * pokemonsPerPage;\r\n    if (firstIndex >= totalPokemons) return; //si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\r\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    //console.log('nextPage', nextPage)\r\n    console.log(\"currentPage\", currentPage);\r\n    setCurrentPage(currentPage + 1);\r\n  }\r\n\r\n  function prevHandler() {\r\n    const prevPage = currentPage - 1;\r\n    if (prevPage < 0) return;\r\n    const firstIndex = prevPage * pokemonsPerPage;\r\n    //setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    console.log(\"prevPage\", prevPage);\r\n    console.log(\"currentPage\", currentPage);\r\n    setCurrentPage(prevPage);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getPokemons());\r\n    dispatch(actions.getTypes());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={s.pokemonsSection}>\r\n      <div className={s.filtered}>\r\n        <Filters setCurrentPage={setCurrentPage} />{\" \"}\r\n        {/*paso la pagina actual al componente Filters*/}\r\n      </div>\r\n      <div className={s.pokePaged}>\r\n        {/*<div className={s.allPokemons}>*/}\r\n          {currentPokemons.length > 0 ? (\r\n            <div className={s.newdiv}>\r\n              <div className={s.allPokemons}>\r\n              {currentPokemons?.map((poke) => {\r\n                return (\r\n                  <PokeCard\r\n                    key={poke.id}\r\n                    id={poke.id}\r\n                    name={poke.name}\r\n                    image={poke.img}\r\n                    types={poke.types}\r\n                  />\r\n                );\r\n              })}\r\n              </div>\r\n              {currentPokemons.length > 0 && (\r\n                <Paging\r\n                  pokemonsPerPage={pokemonsPerPage}\r\n                  pokemons={pokemons.length}\r\n                  paging={paging}\r\n                  nextHandler={nextHandler}\r\n                  prevHandler={prevHandler}\r\n                  currentPage={currentPage}\r\n                />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={s.loading}>\r\n              <img src={logo} alt=\"Loading Pokemons\" />\r\n              <h3>LOADING</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {/*</div>*/}\r\n      </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}