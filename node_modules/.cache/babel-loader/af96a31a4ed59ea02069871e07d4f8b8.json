{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicolas\\\\Documents\\\\Nico\\\\Henry\\\\PI\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Pokemons\\\\Pokemons.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport s from './Pokemons.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Paging from '../Paging/Paging';\nimport * as actions from '../../redux/actions';\n\n//importo para poder mapear todas las cards\nimport PokeCard from '../PokeCard/PokeCard';\nimport Filters from '../Filters/Filters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pokemons() {\n  _s();\n  const dispatch = useDispatch();\n  const pokemons = useSelector(state => state.pokemons);\n  const types = useSelector(state => state.types);\n  const filterByType = useSelector(state => state.filterByType);\n\n  //PAGINADO.\n  const [currentPage, setCurrentPage] = useState(1); //La Home abre en la primera p치gina\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Quiero 12 pokemons por p치gina\n\n  React.useEffect(() => {\n    dispatch(actions.getPokemons());\n    dispatch(actions.getTypes());\n  }, [dispatch]);\n  console.log('filteredBytype', filterByType);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.pokemonsSection,\n    children: [/*#__PURE__*/_jsxDEV(Filters, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.pokePaged,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.allPokemons,\n        children: pokemons.map(poke => {\n          return /*#__PURE__*/_jsxDEV(PokeCard, {\n            id: poke.id,\n            name: poke.name,\n            image: poke.img,\n            types: poke.types\n          }, poke.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paging, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n/*      <div className={s.allPokemons}>\r\n        {//si hay un filterbytype mostra lo q incluya ese filtro. Si no existe mapea todo pokemons\r\n          pokemons.filter((el) => filterByType ? el.types.includes(filterByType) : true ).map(poke =>{\r\n            return <PokeCard \r\n            key={poke.id} \r\n            id={poke.id} \r\n            name={poke.name} \r\n            image={poke.img} \r\n            types={poke.types}/>\r\n          }) \r\n\r\n        }\r\n*/\n_s(Pokemons, \"kN+oHR8Kh+4yHDXOe/JpMNWLltw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Pokemons;\nvar _c;\n$RefreshReg$(_c, \"Pokemons\");","map":{"version":3,"names":["React","s","useDispatch","useSelector","Paging","actions","PokeCard","Filters","Pokemons","dispatch","pokemons","state","types","filterByType","currentPage","setCurrentPage","useState","pokemonsPerPage","useEffect","getPokemons","getTypes","console","log","pokemonsSection","pokePaged","allPokemons","map","poke","id","name","img"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/PI-Pokemon-main/client/src/components/Pokemons/Pokemons.js"],"sourcesContent":["import React from 'react'\r\nimport s from './Pokemons.module.css'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Paging from '../Paging/Paging';\r\n\r\nimport * as actions from '../../redux/actions'\r\n\r\n//importo para poder mapear todas las cards\r\nimport PokeCard from '../PokeCard/PokeCard';\r\nimport Filters from '../Filters/Filters';\r\n\r\nexport default function Pokemons() {\r\n  const dispatch = useDispatch();\r\n  const pokemons = useSelector((state)=> state.pokemons);\r\n  const types = useSelector((state)=> state.types);\r\n  const filterByType = useSelector((state)=> state.filterByType);\r\n\r\n   //PAGINADO.\r\n   const [currentPage, setCurrentPage] = useState(1); //La Home abre en la primera p치gina\r\n   const [pokemonsPerPage, /*setPokemonsPerPage*/] = useState(12);             //Quiero 12 pokemons por p치gina\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getPokemons());\r\n    dispatch(actions.getTypes());\r\n  },[dispatch])\r\n\r\n  console.log('filteredBytype', filterByType)\r\n  return (\r\n    <div className={s.pokemonsSection}>\r\n      <Filters />\r\n      <div className={s.pokePaged}>\r\n        <div className={s.allPokemons}>\r\n          {\r\n            pokemons.map(poke =>{\r\n              return <PokeCard \r\n              key={poke.id} \r\n              id={poke.id} \r\n              name={poke.name} \r\n              image={poke.img} \r\n              types={poke.types}/>\r\n            }) \r\n\r\n          }\r\n        </div>\r\n        <Paging/>\r\n      </div>\r\n    </div>  \r\n  )\r\n}\r\n\r\n/*      <div className={s.allPokemons}>\r\n        {//si hay un filterbytype mostra lo q incluya ese filtro. Si no existe mapea todo pokemons\r\n          pokemons.filter((el) => filterByType ? el.types.includes(filterByType) : true ).map(poke =>{\r\n            return <PokeCard \r\n            key={poke.id} \r\n            id={poke.id} \r\n            name={poke.name} \r\n            image={poke.img} \r\n            types={poke.types}/>\r\n          }) \r\n\r\n        }\r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,uBAAuB;AACrC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,MAAM,MAAM,kBAAkB;AAErC,OAAO,KAAKC,OAAO,MAAM,qBAAqB;;AAE9C;AACA,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,OAAO,MAAM,oBAAoB;AAAC;AAEzC,eAAe,SAASC,QAAQ,GAAG;EAAA;EACjC,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,QAAQ,GAAGP,WAAW,CAAEQ,KAAK,IAAIA,KAAK,CAACD,QAAQ,CAAC;EACtD,MAAME,KAAK,GAAGT,WAAW,CAAEQ,KAAK,IAAIA,KAAK,CAACC,KAAK,CAAC;EAChD,MAAMC,YAAY,GAAGV,WAAW,CAAEQ,KAAK,IAAIA,KAAK,CAACE,YAAY,CAAC;;EAE7D;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,MAAM,CAACC,eAAe,CAAE,uBAAuB,GAAGD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAa;;EAE7EhB,KAAK,CAACkB,SAAS,CAAC,MAAM;IACpBT,QAAQ,CAACJ,OAAO,CAACc,WAAW,EAAE,CAAC;IAC/BV,QAAQ,CAACJ,OAAO,CAACe,QAAQ,EAAE,CAAC;EAC9B,CAAC,EAAC,CAACX,QAAQ,CAAC,CAAC;EAEbY,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAET,YAAY,CAAC;EAC3C,oBACE;IAAK,SAAS,EAAEZ,CAAC,CAACsB,eAAgB;IAAA,wBAChC,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG,eACX;MAAK,SAAS,EAAEtB,CAAC,CAACuB,SAAU;MAAA,wBAC1B;QAAK,SAAS,EAAEvB,CAAC,CAACwB,WAAY;QAAA,UAE1Bf,QAAQ,CAACgB,GAAG,CAACC,IAAI,IAAG;UAClB,oBAAO,QAAC,QAAQ;YAEhB,EAAE,EAAEA,IAAI,CAACC,EAAG;YACZ,IAAI,EAAED,IAAI,CAACE,IAAK;YAChB,KAAK,EAAEF,IAAI,CAACG,GAAI;YAChB,KAAK,EAAEH,IAAI,CAACf;UAAM,GAJbe,IAAI,CAACC,EAAE;YAAA;YAAA;YAAA;UAAA,QAIQ;QACtB,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAGA,eACN,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,GAvCwBpB,QAAQ;EAAA,QACbN,WAAW,EACXC,WAAW,EACdA,WAAW,EACJA,WAAW;AAAA;AAAA,KAJVK,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}