{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicolas\\\\Documents\\\\Nico\\\\Henry\\\\PI\\\\PI-Pokemon-main\\\\client\\\\src\\\\components\\\\Pokemons\\\\Pokemons.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport s from \"./Pokemons.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../Navbar/pokeLogo.png\";\nimport * as actions from \"../../redux/actions\";\n\n//importo para poder mapear todas las cards\nimport PokeCard from \"../PokeCard/PokeCard\";\nimport Paging from \"../Paging/Paging\";\nimport Filters from \"../Filters/Filters\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pokemons() {\n  _s();\n  const dispatch = useDispatch();\n  const pokemons = useSelector(state => state.pokemons);\n  //const types = useSelector((state)=> state.types);\n  //const filterByType = useSelector((state)=> state.filterByType);\n\n  //Paginado\n  const [currentPage, setCurrentPage] = useState(1); //Pokemons va a empezar en la primera pagina\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Traigo 12 poke por pagina\n  const [, /*items*/setItems] = useState([...pokemons].splice(0, pokemonsPerPage)); //splice modifica la array\n  const indexOfLastPokemon = currentPage * pokemonsPerPage; //empieza en 12. Es el indice del ultimo poke que tengo en la pagina\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage; //empieza en 0. 12-12 . Es el indice del primer pokemon\n  const currentPokemons = pokemons.slice(indexOfFirstPokemon, indexOfLastPokemon); //corto los poke q quiero de la array de pokemons\n\n  function paging(pageNumber) {\n    setCurrentPage(pageNumber); //setea la pag actual con el nro de pagina que le paso desde el Paging\n  }\n\n  function nextHandler() {\n    const totalPokemons = pokemons.length;\n    const nextPage = currentPage + 1;\n    const firstIndex = nextPage * pokemonsPerPage;\n    if (firstIndex >= totalPokemons) return; //si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\n    setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\n    setCurrentPage(nextPage);\n  }\n  function prevHandler() {\n    const prevPage = currentPage - 1; //va a ir a la pagina -1 de la pagina actual\n    if (prevPage < 0) return; //para q no funcione si estoy en la pagina 1\n    const firstIndex = prevPage * pokemonsPerPage; //en la pag 2 es 12\n    setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\n    setCurrentPage(prevPage);\n  }\n  React.useEffect(() => {\n    dispatch(actions.getPokemons());\n    dispatch(actions.getTypes());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.pokemonsSection,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.filtered,\n      children: [/*#__PURE__*/_jsxDEV(Filters, {\n        setCurrentPage: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.pokePaged,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.allPokemons,\n        children: currentPokemons.length > 0 ? currentPokemons === null || currentPokemons === void 0 ? void 0 : currentPokemons.map(poke => {\n          return /*#__PURE__*/_jsxDEV(PokeCard, {\n            id: poke.id,\n            name: poke.name,\n            image: poke.img,\n            types: poke.types\n          }, poke.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.loading,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Loading Pokemons\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"LOADING\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paging, {\n        pokemonsPerPage: pokemonsPerPage,\n        pokemons: pokemons.length,\n        paging: paging,\n        nextHandler: nextHandler,\n        prevHandler: prevHandler,\n        currentPage: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Pokemons, \"MZkoxkcMt0uL1zPwca5yTwELJKk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Pokemons;\nvar _c;\n$RefreshReg$(_c, \"Pokemons\");","map":{"version":3,"names":["React","useState","s","useDispatch","useSelector","logo","actions","PokeCard","Paging","Filters","Pokemons","dispatch","pokemons","state","currentPage","setCurrentPage","pokemonsPerPage","setItems","splice","indexOfLastPokemon","indexOfFirstPokemon","currentPokemons","slice","paging","pageNumber","nextHandler","totalPokemons","length","nextPage","firstIndex","prevHandler","prevPage","useEffect","getPokemons","getTypes","pokemonsSection","filtered","pokePaged","allPokemons","map","poke","id","name","img","types","loading"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/PI-Pokemon-main/client/src/components/Pokemons/Pokemons.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport s from \"./Pokemons.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logo from \"../Navbar/pokeLogo.png\";\r\nimport * as actions from \"../../redux/actions\";\r\n\r\n//importo para poder mapear todas las cards\r\nimport PokeCard from \"../PokeCard/PokeCard\";\r\n\r\nimport Paging from \"../Paging/Paging\";\r\nimport Filters from \"../Filters/Filters\";\r\n\r\nexport default function Pokemons() {\r\n  const dispatch = useDispatch();\r\n  const pokemons = useSelector((state) => state.pokemons);\r\n  //const types = useSelector((state)=> state.types);\r\n  //const filterByType = useSelector((state)=> state.filterByType);\r\n\r\n  //Paginado\r\n  const [currentPage, setCurrentPage] = useState(1); //Pokemons va a empezar en la primera pagina\r\n  const [pokemonsPerPage /*setPokemonsPerPage*/] = useState(12); //Traigo 12 poke por pagina\r\n  const [, /*items*/ setItems] = useState(\r\n    [...pokemons].splice(0, pokemonsPerPage)\r\n  ); //splice modifica la array\r\n  const indexOfLastPokemon = currentPage * pokemonsPerPage; //empieza en 12. Es el indice del ultimo poke que tengo en la pagina\r\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage; //empieza en 0. 12-12 . Es el indice del primer pokemon\r\n  const currentPokemons = pokemons.slice(\r\n    indexOfFirstPokemon,\r\n    indexOfLastPokemon\r\n  ); //corto los poke q quiero de la array de pokemons\r\n\r\n  function paging(pageNumber) {\r\n    setCurrentPage(pageNumber); //setea la pag actual con el nro de pagina que le paso desde el Paging\r\n  }\r\n\r\n  function nextHandler() {\r\n    const totalPokemons = pokemons.length;\r\n    const nextPage = currentPage + 1;\r\n    const firstIndex = nextPage * pokemonsPerPage;\r\n    if (firstIndex >= totalPokemons) return; //si el indice es = al total de poke, estoy en el ultimo poke y no puede haber next\r\n    setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    setCurrentPage(nextPage);\r\n  }\r\n\r\n  function prevHandler() {\r\n    const prevPage = currentPage - 1; //va a ir a la pagina -1 de la pagina actual\r\n    if (prevPage < 0) return; //para q no funcione si estoy en la pagina 1\r\n    const firstIndex = prevPage * pokemonsPerPage; //en la pag 2 es 12\r\n    setItems([...pokemons].splice(firstIndex, pokemonsPerPage));\r\n    setCurrentPage(prevPage);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getPokemons());\r\n    dispatch(actions.getTypes());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={s.pokemonsSection}>\r\n      <div className={s.filtered}>\r\n        <Filters setCurrentPage={setCurrentPage} />{\" \"}\r\n        {/*paso la pagina actual al componente Filters*/}\r\n      </div>\r\n      <div className={s.pokePaged}>\r\n        <div className={s.allPokemons}>\r\n          {currentPokemons.length > 0 ? (\r\n            currentPokemons?.map((poke) => {\r\n              return (\r\n                <PokeCard\r\n                  key={poke.id}\r\n                  id={poke.id}\r\n                  name={poke.name}\r\n                  image={poke.img}\r\n                  types={poke.types}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <div className={s.loading}>\r\n              <img src={logo} alt=\"Loading Pokemons\" />\r\n              <h3>LOADING</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <Paging\r\n          pokemonsPerPage={pokemonsPerPage}\r\n          pokemons={pokemons.length}\r\n          paging={paging}\r\n          nextHandler={nextHandler}\r\n          prevHandler={prevHandler}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}