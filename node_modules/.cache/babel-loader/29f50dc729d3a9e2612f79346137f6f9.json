{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_DETAIL, CREATE_POKEMON, DELETE_POKEMON, GET_TYPES, SORT_BY_ALPHABET, SORT_BY_ATTACK, FILTER_BY_CREATED, FILTER_BY_TYPE, SEARCH_POKEMON, CLEAN_FILTER, UPDATE_POKEMON } from \"./actions\";\nconst initialState = {\n  pokemons: [],\n  allPokemons: [],\n  pokemonDetail: {},\n  types: [],\n  //filterByType: [],\n  filterPokemons: [],\n  filterTypes: \"All\",\n  filterCreated: \"All\"\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        pokemons: action.payload,\n        allPokemons: action.payload\n      };\n    case GET_POKEMON_DETAIL:\n      return {\n        ...state,\n        pokemonDetail: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        types: action.payload\n      };\n    case CREATE_POKEMON:\n      const name = action.payload.data.name;\n      const speed = action.payload.data.speed;\n      const hp = action.payload.data.hp;\n      const height = action.payload.data.height;\n      const weight = action.payload.data.weight;\n      const attack = action.payload.data.attack;\n      const defense = action.payload.data.defense;\n      const createdInDB = action.payload.data.createdInDB;\n      const types = action.payload.data.types;\n      const img = action.payload.data.img;\n      return {\n        ...state,\n        pokemons: state.pokemons.concat({\n          name,\n          speed,\n          hp,\n          height,\n          weight,\n          attack,\n          defense,\n          createdInDB,\n          types,\n          img\n        })\n      };\n    case UPDATE_POKEMON:\n      const index = state.pokemons.findIndex(poke => poke.id === action.payload.id);\n      // Creo una copia del estado y actualiza el elemento en la copia\n      const newState = {\n        ...state\n      };\n      newState.pokemons[index] = action.payload;\n      // Devuelve la copia actualizada del estado\n      return newState;\n    case DELETE_POKEMON:\n      const deleted = action.payload;\n      const remove = state.pokemons.filter(pokemon => pokemon.id !== deleted);\n      return {\n        ...state,\n        pokemons: remove\n      };\n\n    //SORTS Y FILTERS\n    // case FILTER_BY_CREATED:\n    //   let allPoke1 = state.allPokemons; //todos los poke\n    //   let created = state.pokemons.filter((poke) => poke.createdInDB); //filtro los q tienen la prop createdInDB\n    //   let apiPoke = state.pokemons.filter((poke) => !poke.createdInDB); //filtro los q NO tienen la prop createdInDB\n    //   let createdFilter = action.payload === \"Data Base\" ? created : apiPoke; //el ternario hace que al aplicar el filtro\n    //                                //si se cumple muestra los creados y si es false muestra los que vienen de la API\n    //   return {\n    //     ...state,                   //el state pokemons tiene un ternario q si el value es All muestra todos los poke\n    //     pokemons: action.payload === \"All\" ? allPoke1 : createdFilter, //si no, muestra el resultado de createdFilter\n    //   };\n    case FILTER_BY_CREATED:\n      let resultCreated = [];\n      switch (action.payload) {\n        case \"API\":\n          const filterApi = state.allPokemons;\n          if (state.filterTypes === \"All\") {\n            resultCreated = filterApi;\n          } else {\n            filterApi.forEach(poke => {\n              if (poke.types.includes(state.filterTypes).length) {\n                resultCreated.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            filterPokemons: resultCreated,\n            filterCreated: action.payload\n          };\n        case \"Data Base\":\n          const filterDB = state.allPokemons;\n          if (state.filterTypes === \"All\") {\n            resultCreated = filterDB;\n          } else {\n            filterDB.forEach(poke => {\n              if (poke.types.includes(state.filterTypes).length) {\n                resultCreated.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            filterPokemons: resultCreated,\n            filterCreated: action.payload\n          };\n        default:\n          if (state.filterTypes === \"All\") {\n            resultCreated = state.pokemons;\n          } else {\n            state.pokemons.forEach(poke => {\n              if (poke.types.includes(state.filterTypes).length) {\n                resultCreated.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            filterPokemons: resultCreated,\n            filterCreated: action.payload\n          };\n      }\n    case FILTER_BY_TYPE:\n      let result = [];\n      switch (state.filterCreated) {\n        case \"API\":\n          const filterApi = state.allPokemons;\n          if (action.payload === \"All\") {\n            result = filterApi;\n          } else {\n            filterApi.forEach(poke => {\n              if (poke.type.includes(action.payload).length) {\n                result.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            filter\n          };\n      }\n\n    // let type = action.payload;\n    // let allPoke = state.allPokemons; //todos los poke\n    // let pokemonFiltered = state.pokemons.filter(\n    //   (poke) => poke.types.includes(type) //los poke que tengan el type elegido\n    // ); //si elijo All muestr todos los poke y si no, muestro los q coinciden con el filtro\n    // let test = action.payload === \"All\" ? allPoke : pokemonFiltered;\n\n    // if (pokemonFiltered.length > 0) {\n    //   return {\n    //     ...state,\n    //     pokemons: test,\n    //   };\n    // } else {\n    //   return {\n    //     ...state, //si no hay ningun poke con ese type, muestro todos los poke\n    //     pokemons: state.allPokemons,\n    //   };\n    // }\n\n    case SORT_BY_ALPHABET:\n      const sortAlpha = action.payload === \"a-z\" ? state.pokemons.sort((a, b) => {\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          return 1;\n        }\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return -1;\n        }\n        return 0;\n      }) : state.pokemons.sort((a, b) => {\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          return -1;\n        }\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        pokemons: sortAlpha\n      };\n    case SORT_BY_ATTACK:\n      let sortedPoke = action.payload === \"- to +\" ? state.pokemons.sort((a, b) => {\n        if (a.attack > b.attack) {\n          return 1;\n        }\n        if (a.attack < b.attack) {\n          return -1;\n        }\n        return 0;\n      }) : state.pokemons.sort((a, b) => {\n        if (a.attack > b.attack) {\n          return -1;\n        }\n        if (a.attack < b.attack) {\n          return 1;\n        }\n        return 0;\n      });\n      console.log(\"state.pokemons attack\", state.pokemons);\n      return {\n        ...state,\n        pokemons: sortedPoke\n      };\n    case SEARCH_POKEMON:\n      return {\n        ...state,\n        pokemons: action.payload\n      };\n    case CLEAN_FILTER:\n      const all = state.pokemons;\n      return {\n        ...state,\n        pokemons: all\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_DETAIL","CREATE_POKEMON","DELETE_POKEMON","GET_TYPES","SORT_BY_ALPHABET","SORT_BY_ATTACK","FILTER_BY_CREATED","FILTER_BY_TYPE","SEARCH_POKEMON","CLEAN_FILTER","UPDATE_POKEMON","initialState","pokemons","allPokemons","pokemonDetail","types","filterPokemons","filterTypes","filterCreated","rootReducer","state","action","type","payload","name","data","speed","hp","height","weight","attack","defense","createdInDB","img","concat","index","findIndex","poke","id","newState","deleted","remove","filter","pokemon","resultCreated","filterApi","forEach","includes","length","push","filterDB","result","sortAlpha","sort","a","b","toLowerCase","sortedPoke","console","log","all"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/PI-Pokemon-main/client/src/redux/reducer.js"],"sourcesContent":["import {\r\n  GET_POKEMONS,\r\n  GET_POKEMON_DETAIL,\r\n  CREATE_POKEMON,\r\n  DELETE_POKEMON,\r\n  GET_TYPES,\r\n  SORT_BY_ALPHABET,\r\n  SORT_BY_ATTACK,\r\n  FILTER_BY_CREATED,\r\n  FILTER_BY_TYPE,\r\n  SEARCH_POKEMON,\r\n  CLEAN_FILTER,\r\n  UPDATE_POKEMON,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  pokemons: [],\r\n  allPokemons: [],\r\n  pokemonDetail: {},\r\n  types: [],\r\n\r\n  //filterByType: [],\r\n  filterPokemons: [],\r\n  filterTypes: \"All\",\r\n  filterCreated: \"All\",\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_POKEMONS:\r\n      return {\r\n        ...state,\r\n        pokemons: action.payload,\r\n        allPokemons: action.payload,\r\n      };\r\n    case GET_POKEMON_DETAIL:\r\n      return {\r\n        ...state,\r\n        pokemonDetail: action.payload,\r\n      };\r\n    case GET_TYPES:\r\n      return {\r\n        ...state,\r\n        types: action.payload,\r\n      };\r\n    case CREATE_POKEMON:\r\n      const name = action.payload.data.name;\r\n      const speed = action.payload.data.speed;\r\n      const hp = action.payload.data.hp;\r\n      const height = action.payload.data.height;\r\n      const weight = action.payload.data.weight;\r\n      const attack = action.payload.data.attack;\r\n      const defense = action.payload.data.defense;\r\n      const createdInDB = action.payload.data.createdInDB;\r\n      const types = action.payload.data.types;\r\n      const img = action.payload.data.img;\r\n\r\n      return {\r\n        ...state,\r\n        pokemons: state.pokemons.concat({\r\n          name,\r\n          speed,\r\n          hp,\r\n          height,\r\n          weight,\r\n          attack,\r\n          defense,\r\n          createdInDB,\r\n          types,\r\n          img,\r\n        }),\r\n      };\r\n\r\n    case UPDATE_POKEMON:\r\n      const index = state.pokemons.findIndex(\r\n        (poke) => poke.id === action.payload.id\r\n      );\r\n      // Creo una copia del estado y actualiza el elemento en la copia\r\n      const newState = { ...state };\r\n      newState.pokemons[index] = action.payload;\r\n      // Devuelve la copia actualizada del estado\r\n      return newState;\r\n\r\n    case DELETE_POKEMON:\r\n      const deleted = action.payload;\r\n      const remove = state.pokemons.filter((pokemon) => pokemon.id !== deleted);\r\n\r\n      return {\r\n        ...state,\r\n        pokemons: remove,\r\n      };\r\n\r\n    //SORTS Y FILTERS\r\n    // case FILTER_BY_CREATED:\r\n    //   let allPoke1 = state.allPokemons; //todos los poke\r\n    //   let created = state.pokemons.filter((poke) => poke.createdInDB); //filtro los q tienen la prop createdInDB\r\n    //   let apiPoke = state.pokemons.filter((poke) => !poke.createdInDB); //filtro los q NO tienen la prop createdInDB\r\n    //   let createdFilter = action.payload === \"Data Base\" ? created : apiPoke; //el ternario hace que al aplicar el filtro\r\n    //                                //si se cumple muestra los creados y si es false muestra los que vienen de la API\r\n    //   return {\r\n    //     ...state,                   //el state pokemons tiene un ternario q si el value es All muestra todos los poke\r\n    //     pokemons: action.payload === \"All\" ? allPoke1 : createdFilter, //si no, muestra el resultado de createdFilter\r\n    //   };\r\n    case FILTER_BY_CREATED:\r\n      let resultCreated = [];\r\n      switch (action.payload) {\r\n        case \"API\":\r\n          const filterApi = state.allPokemons;\r\n          if (state.filterTypes === \"All\") {\r\n            resultCreated = filterApi;\r\n          } else {\r\n            filterApi.forEach((poke) => {\r\n              if (poke.types.includes(state.filterTypes).length) {\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            filterPokemons: resultCreated,\r\n            filterCreated: action.payload,\r\n          };\r\n        case \"Data Base\":\r\n          const filterDB = state.allPokemons;\r\n          if (state.filterTypes === \"All\") {\r\n            resultCreated = filterDB;\r\n          } else {\r\n            filterDB.forEach((poke) => {\r\n              if (poke.types.includes(state.filterTypes).length) {\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            filterPokemons: resultCreated,\r\n            filterCreated: action.payload,\r\n          };\r\n        default:\r\n          if (state.filterTypes === \"All\") {\r\n            resultCreated = state.pokemons;\r\n          } else {\r\n            state.pokemons.forEach((poke) => {\r\n              if (poke.types.includes(state.filterTypes).length) {\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            filterPokemons: resultCreated,\r\n            filterCreated: action.payload,\r\n          };\r\n      }\r\n\r\n    case FILTER_BY_TYPE:\r\n      let result = [];\r\n\r\n      switch(state.filterCreated){\r\n        case \"API\":\r\n          const filterApi = state.allPokemons;\r\n          if(action.payload === \"All\"){\r\n            result = filterApi;\r\n          } else{\r\n            filterApi.forEach((poke) => {\r\n              if(poke.type.includes(action.payload).length){\r\n                result.push(poke)\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            filter\r\n          }\r\n      }\r\n  \r\n  \r\n    // let type = action.payload;\r\n      // let allPoke = state.allPokemons; //todos los poke\r\n      // let pokemonFiltered = state.pokemons.filter(\r\n      //   (poke) => poke.types.includes(type) //los poke que tengan el type elegido\r\n      // ); //si elijo All muestr todos los poke y si no, muestro los q coinciden con el filtro\r\n      // let test = action.payload === \"All\" ? allPoke : pokemonFiltered;\r\n\r\n      // if (pokemonFiltered.length > 0) {\r\n      //   return {\r\n      //     ...state,\r\n      //     pokemons: test,\r\n      //   };\r\n      // } else {\r\n      //   return {\r\n      //     ...state, //si no hay ningun poke con ese type, muestro todos los poke\r\n      //     pokemons: state.allPokemons,\r\n      //   };\r\n      // }\r\n\r\n    case SORT_BY_ALPHABET:\r\n      const sortAlpha =\r\n        action.payload === \"a-z\"\r\n          ? state.pokemons.sort((a, b) => {\r\n              if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                return 1;\r\n              }\r\n              if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            })\r\n          : state.pokemons.sort((a, b) => {\r\n              if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                return -1;\r\n              }\r\n              if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                return 1;\r\n              }\r\n              return 0;\r\n            });\r\n      return {\r\n        ...state,\r\n        pokemons: sortAlpha,\r\n      };\r\n\r\n    case SORT_BY_ATTACK:\r\n      let sortedPoke =\r\n        action.payload === \"- to +\"\r\n          ? state.pokemons.sort((a, b) => {\r\n              if (a.attack > b.attack) {\r\n                return 1;\r\n              }\r\n              if (a.attack < b.attack) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            })\r\n          : state.pokemons.sort((a, b) => {\r\n              if (a.attack > b.attack) {\r\n                return -1;\r\n              }\r\n              if (a.attack < b.attack) {\r\n                return 1;\r\n              }\r\n              return 0;\r\n            });\r\n      console.log(\"state.pokemons attack\", state.pokemons);\r\n      return {\r\n        ...state,\r\n        pokemons: sortedPoke,\r\n      };\r\n\r\n    case SEARCH_POKEMON:\r\n      return {\r\n        ...state,\r\n        pokemons: action.payload,\r\n      };\r\n\r\n    case CLEAN_FILTER:\r\n      const all = state.pokemons;\r\n      return {\r\n        ...state,\r\n        pokemons: all,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}