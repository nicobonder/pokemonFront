{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_DETAIL, CREATE_POKEMON, DELETE_POKEMON, GET_TYPES, SORT_BY_ALPHABET, SORT_BY_ATTACK, FILTER_BY_CREATED, FILTER_BY_TYPE, SEARCH_POKEMON, CLEAN_FILTER, UPDATE_POKEMON, CLEAN_POKEMON } from \"./actions\";\nconst initialState = {\n  pokemons: [],\n  allPokemons: [],\n  pokemonDetail: {},\n  types: [],\n  filterTypes: \"All\",\n  filterCreated: \"All\"\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        pokemons: action.payload,\n        allPokemons: action.payload\n      };\n    case GET_POKEMON_DETAIL:\n      return {\n        ...state,\n        pokemonDetail: action.payload\n      };\n    case CLEAN_POKEMON:\n      return {\n        ...state,\n        pokemonDetail: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        types: action.payload\n      };\n    case CREATE_POKEMON:\n      //payload es newPokemon, que viene de action, q lo trae del back\n      const name = action.payload.data.name;\n      const speed = action.payload.data.speed;\n      const hp = action.payload.data.hp;\n      const height = action.payload.data.height;\n      const weight = action.payload.data.weight;\n      const attack = action.payload.data.attack;\n      const defense = action.payload.data.defense;\n      const createdInDB = action.payload.data.createdInDB;\n      const types = action.payload.data.types;\n      const img = action.payload.data.img;\n      return {\n        ...state,\n        pokemons: state.pokemons.concat({\n          //a la array de pokemons le concateno un obj con todas estas props\n          name,\n          speed,\n          hp,\n          height,\n          weight,\n          attack,\n          defense,\n          createdInDB,\n          types,\n          img\n        })\n      };\n    case UPDATE_POKEMON:\n      //busco dentro de pokemons el index q tiene el poke que quiero actualizar\n      const index = state.pokemons.findIndex(poke => poke.id === action.payload.id);\n      // Creo una copia del estado y actualiza el elemento en la copia\n      const newState = {\n        ...state\n      };\n      newState.pokemons[index] = action.payload;\n      // Devuelve la copia actualizada del estado\n      return newState;\n    case DELETE_POKEMON:\n      const deleted = action.payload;\n      const remove = state.pokemons.filter(pokemon => pokemon.id !== deleted);\n      return {\n        ...state,\n        pokemons: remove\n      };\n    case FILTER_BY_CREATED:\n      let resultCreated = [];\n      console.log(\"filtertypes \", state.filterTypes); //da all\n      switch //payload es API, Data Base o All\n      (action.payload) {\n        case \"API\":\n          const filterApi = state.allPokemons;\n          if (state.filterTypes === \"All\") {\n            //no hay un type especifico\n            filterApi.forEach(poke => {\n              //reviso c/ poke de la array filterApi (todos los poke)\n              if (!poke.createdInDB) {\n                //como estoy en el case de API solo empujo los q no tienen la prop createdInDB\n                resultCreated.push(poke); //los q cumplen, los empujo a resultCreated\n              }\n            });\n          } else {\n            filterApi.forEach(poke => {\n              //esta parte es para q tb tenga en cuenta el filtrado por type\n              if (!poke.hasOwnProperty(\"createdInDB\") && poke.types.indexOf(state.filterTypes) >= 0 //quiere decir q el poke tb esta dentro del filterTypes\n              ) {\n                resultCreated.push(poke);\n              }\n            });\n            console.log(\"resultcreated en API\", resultCreated);\n          }\n          return {\n            ...state,\n            pokemons: resultCreated,\n            filterCreated: action.payload //el valor de filterCreated va a servir para cdo haga el case de FILTER_BY_TYPE\n          };\n\n        case \"Data Base\":\n          const filterDB = state.allPokemons;\n          if (state.filterTypes === \"All\") {\n            filterDB.forEach(poke => {\n              if (poke.createdInDB) {\n                //en este caso reviso q SI tenga la prop createdInDB\n                resultCreated.push(poke);\n              }\n            });\n          } else {\n            filterDB.forEach(poke => {\n              if (poke.createdInDB && poke.types.indexOf(state.filterTypes) >= 0) {\n                resultCreated.push(poke);\n              }\n            });\n            console.log(\"resultcreated en DB case en filterCreated\", resultCreated);\n          }\n          return {\n            ...state,\n            pokemons: resultCreated,\n            filterCreated: action.payload\n          };\n        default:\n          if (state.filterTypes === \"All\") {\n            resultCreated = state.allPokemons;\n          } else {\n            state.allPokemons.forEach(poke => {\n              if (poke.types.indexOf(state.filterTypes) >= 0) {\n                //no chequeo si es de DB o no \n                resultCreated.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            pokemons: resultCreated,\n            filterCreated: action.payload\n          };\n      }\n    case FILTER_BY_TYPE:\n      let result = [];\n      switch (state.filterCreated) {\n        //filterCreated va a tomar los valores de API, Data Base o All\n        case \"API\":\n          const filterApi = state.allPokemons;\n          if (action.payload === \"All\") {\n            //si no tengo un type especifico \n            result = filterApi; //muestro todos los pokes, result es = a state.allPokemons\n          } else {\n            filterApi.forEach(poke => {\n              if (poke.types.indexOf(action.payload) >= 0 && !poke.createdInDB //si hay pokes en el filtro y poke no es de la DB\n              ) {\n                //y si hay resultados para ese filtro\n                result.push(poke); //empujo a result cada uno de los resultados\n              }\n            });\n\n            console.log(\"result\", result);\n          }\n          return {\n            ...state,\n            pokemons: result,\n            //devuelvo lo q tenga en result\n            filterTypes: action.payload //y type va a ser el payload que viene por lo q elija el usuario\n          };\n\n        case \"Data Base\":\n          const filterDB = state.allPokemons;\n          if (action.payload === \"All\") {\n            result = filterDB;\n          } else {\n            filterDB.forEach(poke => {\n              if (poke.types.indexOf(action.payload) >= 0 && poke.createdInDB) {\n                result.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            pokemons: result,\n            filterTypes: action.payload\n          };\n        default:\n          if (action.payload === \"All\") {\n            result = state.allPokemons;\n          } else {\n            state.allPokemons.forEach(poke => {\n              if (poke.types.indexOf(action.payload) >= 0) {\n                //aca no chequeo si es o no de DB\n                result.push(poke);\n              }\n            });\n          }\n          return {\n            ...state,\n            pokemons: result,\n            filterTypes: action.payload\n          };\n      }\n    case SORT_BY_ALPHABET:\n      const sortAlpha = action.payload === \"a-z\" //es lo q elige el usuario desde el filter\n      ? state.pokemons.sort((a, b) => {\n        //si elige a-z se ordena de esta forma\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          return 1;\n        }\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return -1;\n        }\n        return 0;\n      }) : state.pokemons.sort((a, b) => {\n        //si elige z-a se ordena de esta forma\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          //el pirmer elem va primero\n          return -1;\n        }\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        pokemons: sortAlpha\n      };\n    case SORT_BY_ATTACK:\n      let sortedPoke = action.payload === \"- to +\" //es lo q elige el usuario\n      ? state.pokemons.sort((a, b) => {\n        if (a.attack > b.attack) {\n          return 1;\n        }\n        if (a.attack < b.attack) {\n          return -1;\n        }\n        return 0;\n      }) : state.pokemons.sort((a, b) => {\n        if (a.attack > b.attack) {\n          return -1;\n        }\n        if (a.attack < b.attack) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        pokemons: sortedPoke\n      };\n    case SEARCH_POKEMON:\n      return {\n        ...state,\n        pokemons: action.payload\n      };\n    case CLEAN_FILTER:\n      const all = state.pokemons;\n      return {\n        ...state,\n        pokemons: all\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_DETAIL","CREATE_POKEMON","DELETE_POKEMON","GET_TYPES","SORT_BY_ALPHABET","SORT_BY_ATTACK","FILTER_BY_CREATED","FILTER_BY_TYPE","SEARCH_POKEMON","CLEAN_FILTER","UPDATE_POKEMON","CLEAN_POKEMON","initialState","pokemons","allPokemons","pokemonDetail","types","filterTypes","filterCreated","rootReducer","state","action","type","payload","name","data","speed","hp","height","weight","attack","defense","createdInDB","img","concat","index","findIndex","poke","id","newState","deleted","remove","filter","pokemon","resultCreated","console","log","filterApi","forEach","push","hasOwnProperty","indexOf","filterDB","result","sortAlpha","sort","a","b","toLowerCase","sortedPoke","all"],"sources":["C:/Users/Nicolas/Documents/Nico/Henry/PI/PI-Pokemon-main/client/src/redux/reducer.js"],"sourcesContent":["import {\r\n  GET_POKEMONS,\r\n  GET_POKEMON_DETAIL,\r\n  CREATE_POKEMON,\r\n  DELETE_POKEMON,\r\n  GET_TYPES,\r\n  SORT_BY_ALPHABET,\r\n  SORT_BY_ATTACK,\r\n  FILTER_BY_CREATED,\r\n  FILTER_BY_TYPE,\r\n  SEARCH_POKEMON,\r\n  CLEAN_FILTER,\r\n  UPDATE_POKEMON,\r\n  CLEAN_POKEMON,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  pokemons: [],\r\n  allPokemons: [],\r\n  pokemonDetail: {},\r\n  types: [],\r\n  filterTypes: \"All\",\r\n  filterCreated: \"All\",\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_POKEMONS:\r\n      return {\r\n        ...state,\r\n        pokemons: action.payload,\r\n        allPokemons: action.payload,\r\n      };\r\n    case GET_POKEMON_DETAIL:\r\n      return {\r\n        ...state,\r\n        pokemonDetail: action.payload,\r\n      };\r\n    case CLEAN_POKEMON:\r\n      return{\r\n        ...state,\r\n        pokemonDetail: action.payload,\r\n      };\r\n    case GET_TYPES:\r\n      return {\r\n        ...state,\r\n        types: action.payload,\r\n      };\r\n    case CREATE_POKEMON: //payload es newPokemon, que viene de action, q lo trae del back\r\n      const name = action.payload.data.name;\r\n      const speed = action.payload.data.speed;\r\n      const hp = action.payload.data.hp;\r\n      const height = action.payload.data.height;\r\n      const weight = action.payload.data.weight;\r\n      const attack = action.payload.data.attack;\r\n      const defense = action.payload.data.defense;\r\n      const createdInDB = action.payload.data.createdInDB;\r\n      const types = action.payload.data.types;\r\n      const img = action.payload.data.img;\r\n\r\n      return {\r\n        ...state,\r\n        pokemons: state.pokemons.concat({ //a la array de pokemons le concateno un obj con todas estas props\r\n          name,\r\n          speed,\r\n          hp,\r\n          height,\r\n          weight,\r\n          attack,\r\n          defense,\r\n          createdInDB,\r\n          types,\r\n          img,\r\n        }),\r\n      };\r\n\r\n    case UPDATE_POKEMON:\r\n      //busco dentro de pokemons el index q tiene el poke que quiero actualizar\r\n      const index = state.pokemons.findIndex(\r\n        (poke) => poke.id === action.payload.id\r\n      );\r\n      // Creo una copia del estado y actualiza el elemento en la copia\r\n      const newState = { ...state };\r\n      newState.pokemons[index] = action.payload;\r\n      // Devuelve la copia actualizada del estado\r\n      return newState;\r\n\r\n    case DELETE_POKEMON:\r\n      const deleted = action.payload;\r\n      const remove = state.pokemons.filter((pokemon) => pokemon.id !== deleted);\r\n\r\n      return {\r\n        ...state,\r\n        pokemons: remove,\r\n      };\r\n\r\n    case FILTER_BY_CREATED:\r\n      let resultCreated = [];\r\n      console.log(\"filtertypes \", state.filterTypes); //da all\r\n      switch (action.payload) //payload es API, Data Base o All\r\n       {\r\n        case \"API\":\r\n          const filterApi = state.allPokemons;\r\n          if (state.filterTypes === \"All\") {\r\n            //no hay un type especifico\r\n            filterApi.forEach((poke) => { //reviso c/ poke de la array filterApi (todos los poke)\r\n              if (!poke.createdInDB) { //como estoy en el case de API solo empujo los q no tienen la prop createdInDB\r\n                resultCreated.push(poke); //los q cumplen, los empujo a resultCreated\r\n              }\r\n            });\r\n          } else {\r\n            filterApi.forEach((poke) => { //esta parte es para q tb tenga en cuenta el filtrado por type\r\n              if (\r\n                !poke.hasOwnProperty(\"createdInDB\") &&\r\n                poke.types.indexOf(state.filterTypes) >= 0 //quiere decir q el poke tb esta dentro del filterTypes\r\n              ) {\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n            console.log(\"resultcreated en API\", resultCreated); \r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: resultCreated,\r\n            filterCreated: action.payload, //el valor de filterCreated va a servir para cdo haga el case de FILTER_BY_TYPE\r\n          };\r\n        case \"Data Base\":\r\n          const filterDB = state.allPokemons;\r\n          if (state.filterTypes === \"All\") {\r\n            filterDB.forEach((poke) => {\r\n              if (poke.createdInDB) { //en este caso reviso q SI tenga la prop createdInDB\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n          } else {\r\n            filterDB.forEach((poke) => { \r\n              if (\r\n                poke.createdInDB &&\r\n                poke.types.indexOf(state.filterTypes) >= 0\r\n              ) {\r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n            console.log(\"resultcreated en DB case en filterCreated\", resultCreated);\r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: resultCreated,\r\n            filterCreated: action.payload,\r\n          };\r\n        default:\r\n          if (state.filterTypes === \"All\") {\r\n            resultCreated = state.allPokemons;\r\n          } else {\r\n            state.allPokemons.forEach((poke) => {\r\n              if (poke.types.indexOf(state.filterTypes) >= 0) { //no chequeo si es de DB o no \r\n                resultCreated.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: resultCreated,\r\n            filterCreated: action.payload,\r\n          };\r\n      }\r\n\r\n    case FILTER_BY_TYPE:\r\n      let result = [];\r\n      switch (state.filterCreated) { //filterCreated va a tomar los valores de API, Data Base o All\r\n        case \"API\":\r\n          const filterApi = state.allPokemons;\r\n          if (action.payload === \"All\") {//si no tengo un type especifico \r\n            result = filterApi; //muestro todos los pokes, result es = a state.allPokemons\r\n          } else {\r\n            filterApi.forEach((poke) => {\r\n              if (\r\n                \r\n                poke.types.indexOf(action.payload) >= 0 && !poke.createdInDB //si hay pokes en el filtro y poke no es de la DB\r\n              ) {\r\n                //y si hay resultados para ese filtro\r\n                result.push(poke); //empujo a result cada uno de los resultados\r\n              }\r\n            });\r\n            console.log(\"result\", result);\r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: result, //devuelvo lo q tenga en result\r\n            filterTypes: action.payload, //y type va a ser el payload que viene por lo q elija el usuario\r\n          };\r\n        case \"Data Base\":\r\n          const filterDB = state.allPokemons;\r\n          if (action.payload === \"All\") {\r\n            result = filterDB;\r\n          } else {\r\n            filterDB.forEach((poke) => {\r\n              if (poke.types.indexOf(action.payload) >= 0 && poke.createdInDB) {\r\n                result.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: result,\r\n            filterTypes: action.payload,\r\n          };\r\n        default:\r\n          if (action.payload === \"All\") {\r\n            result = state.allPokemons;\r\n          } else {\r\n            state.allPokemons.forEach((poke) => {\r\n              if (poke.types.indexOf(action.payload) >= 0) {//aca no chequeo si es o no de DB\r\n                result.push(poke);\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            ...state,\r\n            pokemons: result,\r\n            filterTypes: action.payload,\r\n          };\r\n      }\r\n\r\n    case SORT_BY_ALPHABET:\r\n      const sortAlpha =\r\n        action.payload === \"a-z\" //es lo q elige el usuario desde el filter\r\n          ? state.pokemons.sort((a, b) => { //si elige a-z se ordena de esta forma\r\n              if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                return 1;\r\n              }\r\n              if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            })\r\n          : state.pokemons.sort((a, b) => { //si elige z-a se ordena de esta forma\r\n              if (a.name.toLowerCase() > b.name.toLowerCase()) { //el pirmer elem va primero\r\n                return -1;\r\n              }\r\n              if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                return 1;\r\n              }\r\n              return 0;\r\n            });\r\n      return {\r\n        ...state,\r\n        pokemons: sortAlpha,\r\n      };\r\n\r\n    case SORT_BY_ATTACK:\r\n      let sortedPoke =\r\n        action.payload === \"- to +\" //es lo q elige el usuario\r\n          ? state.pokemons.sort((a, b) => {\r\n              if (a.attack > b.attack) {\r\n                return 1;\r\n              }\r\n              if (a.attack < b.attack) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            })\r\n          : state.pokemons.sort((a, b) => {\r\n              if (a.attack > b.attack) {\r\n                return -1;\r\n              }\r\n              if (a.attack < b.attack) {\r\n                return 1;\r\n              }\r\n              return 0;\r\n            });\r\n      return {\r\n        ...state,\r\n        pokemons: sortedPoke,\r\n      };\r\n\r\n    case SEARCH_POKEMON:\r\n      return {\r\n        ...state,\r\n          pokemons: action.payload,\r\n      };\r\n\r\n    case CLEAN_FILTER:\r\n      const all = state.pokemons;\r\n      return {\r\n        ...state,\r\n        pokemons: all,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}